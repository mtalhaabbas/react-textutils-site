{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","toast","success","position","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","App","setMode","document","body","Date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a912bdb9.chunk.js","sourcesContent":["import React from 'react'\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <div className=\"navbar-brand\" >{props.title}</div>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                    </ul>\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n","import React, {useState} from 'react'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText)\n        toast.success(\"Converted to uppercase!\",{position:\"top-center\"})\n    }\n\n    const handleLoClick = ()=>{ \n        let newText = text.toLowerCase();\n        setText(newText)\n        toast.success(\"Converted to lowercase!\",{position:\"top-center\"})\n    }\n\n    const handleClearClick = ()=>{ \n        let newText = '';\n        setText(newText);\n        toast(\"Text Cleared!\",{position:\"top-center\"})\n    \n    }\n\n    const handleOnChange = (event)=>{\n        setText(event.target.value) \n    }\n\n    // Credits: A\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text); \n        toast.success(\"Copied to Clipboard!\",{position:\"top-center\"})\n       \n    }\n\n    // Credits: Coding Wala\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        toast(\"Extra spaces removed!\",{position:\"top-center\"})\n              \n    }\n\n    const [text, setText] = useState(''); \n\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \n            <h1 className='mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\"> \n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\n        </div>\n        <ToastContainer/>\n        </>\n    )\n}\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      toast(\"Dark mode has been enabled\",{position:\"top-center\"})\n     \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      toast.success(\"Light mode has been enabled\",{position:\"top-center\"})  \n    }\n  }\n  return (\n   <>\n     <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n     <TextForm  heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\n     <ToastContainer/>\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}